// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Global.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Global.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Global_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Global_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Global_Error_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_ElementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_ElementInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Field_ElementType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Global_2eproto() {
  protobuf_AddDesc_Global_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Global.proto");
  GOOGLE_CHECK(file != NULL);
  Global_descriptor_ = file->message_type(0);
  static const int Global_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, error_),
  };
  Global_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Global_descriptor_,
      Global::default_instance_,
      Global_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Global, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Global));
  Global_Error_descriptor_ = Global_descriptor_->enum_type(0);
  Field_descriptor_ = file->message_type(1);
  static const int Field_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, element_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, next_tick_arrives_),
  };
  Field_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Field));
  Field_ElementInfo_descriptor_ = Field_descriptor_->nested_type(0);
  static const int Field_ElementInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field_ElementInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field_ElementInfo, doc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field_ElementInfo, enemy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field_ElementInfo, flux_capatitor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field_ElementInfo, chest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field_ElementInfo, delorean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field_ElementInfo, capability_),
  };
  Field_ElementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Field_ElementInfo_descriptor_,
      Field_ElementInfo::default_instance_,
      Field_ElementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field_ElementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field_ElementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Field_ElementInfo));
  Field_ElementType_descriptor_ = Field_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Global_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Global_descriptor_, &Global::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Field_ElementInfo_descriptor_, &Field_ElementInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Global_2eproto() {
  delete Global::default_instance_;
  delete Global_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete Field_ElementInfo::default_instance_;
  delete Field_ElementInfo_reflection_;
}

void protobuf_AddDesc_Global_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::protobuf_AddDesc_Elements_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Global.proto\022\010protocol\032\016Elements.proto"
    "\"\360\002\n\006Global\022\r\n\005width\030\001 \002(\r\022\016\n\006height\030\002 \002"
    "(\r\022\037\n\006fields\030\003 \003(\0132\017.protocol.Field\022\014\n\004t"
    "ick\030\004 \002(\r\022%\n\005error\030\005 \001(\0162\026.protocol.Glob"
    "al.Error\"\360\001\n\005Error\022\023\n\017NOTSETDIRECTION\020\001\022"
    "\022\n\016WRONGDIRECTION\020\002\022\r\n\tWRONGMOVE\020\003\022\031\n\025NO"
    "TSETFLUXCAPATITORID\020\004\022\033\n\027NOTSETFLUXCAPAT"
    "ITORTIME\020\005\022\030\n\024WRONGFLUXCAPATITORID\020\006\022\032\n\026"
    "WRONGFLUXCAPATITORTIME\020\007\022\024\n\020NOTSETCAPABI"
    "LITY\020\010\022\023\n\017WRONGCAPABILITY\020\t\022\026\n\022WRONGUSEC"
    "APABILITY\020\n\"\356\003\n\005Field\022,\n\007element\030\001 \001(\0132\033"
    ".protocol.Field.ElementInfo\0226\n\021next_tick"
    "_arrives\030\002 \001(\0162\033.protocol.Field.ElementT"
    "ype\032\225\002\n\013ElementInfo\022)\n\004type\030\001 \002(\0162\033.prot"
    "ocol.Field.ElementType\022\032\n\003doc\030\002 \001(\0132\r.pr"
    "otocol.Doc\022\036\n\005enemy\030\003 \001(\0132\017.protocol.Ene"
    "my\022/\n\016flux_capatitor\030\004 \001(\0132\027.protocol.Fl"
    "uxCapatitor\022\036\n\005chest\030\005 \001(\0132\017.protocol.Ch"
    "est\022$\n\010delorean\030\006 \001(\0132\022.protocol.DeLorea"
    "n\022(\n\ncapability\030\007 \001(\0162\024.protocol.Capabil"
    "ity\"g\n\013ElementType\022\021\n\rFLUXCAPATITOR\020\001\022\007\n"
    "\003DOC\020\002\022\t\n\005ENEMY\020\003\022\010\n\004WALL\020\004\022\t\n\005CHEST\020\005\022\014"
    "\n\010DELOREAN\020\006\022\016\n\nCAPABILITY\020\007", 908);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Global.proto", &protobuf_RegisterTypes);
  Global::default_instance_ = new Global();
  Field::default_instance_ = new Field();
  Field_ElementInfo::default_instance_ = new Field_ElementInfo();
  Global::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  Field_ElementInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Global_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Global_2eproto {
  StaticDescriptorInitializer_Global_2eproto() {
    protobuf_AddDesc_Global_2eproto();
  }
} static_descriptor_initializer_Global_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Global_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Global_Error_descriptor_;
}
bool Global_Error_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Global_Error Global::NOTSETDIRECTION;
const Global_Error Global::WRONGDIRECTION;
const Global_Error Global::WRONGMOVE;
const Global_Error Global::NOTSETFLUXCAPATITORID;
const Global_Error Global::NOTSETFLUXCAPATITORTIME;
const Global_Error Global::WRONGFLUXCAPATITORID;
const Global_Error Global::WRONGFLUXCAPATITORTIME;
const Global_Error Global::NOTSETCAPABILITY;
const Global_Error Global::WRONGCAPABILITY;
const Global_Error Global::WRONGUSECAPABILITY;
const Global_Error Global::Error_MIN;
const Global_Error Global::Error_MAX;
const int Global::Error_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Global::kWidthFieldNumber;
const int Global::kHeightFieldNumber;
const int Global::kFieldsFieldNumber;
const int Global::kTickFieldNumber;
const int Global::kErrorFieldNumber;
#endif  // !_MSC_VER

Global::Global()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Global)
}

void Global::InitAsDefaultInstance() {
}

Global::Global(const Global& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Global)
}

void Global::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  tick_ = 0u;
  error_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Global::~Global() {
  // @@protoc_insertion_point(destructor:protocol.Global)
  SharedDtor();
}

void Global::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Global::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Global::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Global_descriptor_;
}

const Global& Global::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

Global* Global::default_instance_ = NULL;

Global* Global::New() const {
  return new Global;
}

void Global::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Global*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(width_, height_);
    tick_ = 0u;
    error_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fields_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Global::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Global)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        break;
      }

      // repeated .protocol.Field fields = 3;
      case 3: {
        if (tag == 26) {
         parse_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        if (input->ExpectTag(32)) goto parse_tick;
        break;
      }

      // required uint32 tick = 4;
      case 4: {
        if (tag == 32) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_error;
        break;
      }

      // optional .protocol.Global.Error error = 5;
      case 5: {
        if (tag == 40) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::Global_Error_IsValid(value)) {
            set_error(static_cast< ::protocol::Global_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Global)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Global)
  return false;
#undef DO_
}

void Global::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Global)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // repeated .protocol.Field fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fields(i), output);
  }

  // required uint32 tick = 4;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tick(), output);
  }

  // optional .protocol.Global.Error error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Global)
}

::google::protobuf::uint8* Global::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Global)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // repeated .protocol.Field fields = 3;
  for (int i = 0; i < this->fields_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fields(i), target);
  }

  // required uint32 tick = 4;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tick(), target);
  }

  // optional .protocol.Global.Error error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Global)
  return target;
}

int Global::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required uint32 tick = 4;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional .protocol.Global.Error error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  // repeated .protocol.Field fields = 3;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Global::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Global* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Global*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Global::MergeFrom(const Global& from) {
  GOOGLE_CHECK_NE(&from, this);
  fields_.MergeFrom(from.fields_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Global::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Global::CopyFrom(const Global& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Global::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->fields())) return false;
  return true;
}

void Global::Swap(Global* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    fields_.Swap(&other->fields_);
    std::swap(tick_, other->tick_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Global::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Global_descriptor_;
  metadata.reflection = Global_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Field_ElementType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_ElementType_descriptor_;
}
bool Field_ElementType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Field_ElementType Field::FLUXCAPATITOR;
const Field_ElementType Field::DOC;
const Field_ElementType Field::ENEMY;
const Field_ElementType Field::WALL;
const Field_ElementType Field::CHEST;
const Field_ElementType Field::DELOREAN;
const Field_ElementType Field::CAPABILITY;
const Field_ElementType Field::ElementType_MIN;
const Field_ElementType Field::ElementType_MAX;
const int Field::ElementType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Field_ElementInfo::kTypeFieldNumber;
const int Field_ElementInfo::kDocFieldNumber;
const int Field_ElementInfo::kEnemyFieldNumber;
const int Field_ElementInfo::kFluxCapatitorFieldNumber;
const int Field_ElementInfo::kChestFieldNumber;
const int Field_ElementInfo::kDeloreanFieldNumber;
const int Field_ElementInfo::kCapabilityFieldNumber;
#endif  // !_MSC_VER

Field_ElementInfo::Field_ElementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Field.ElementInfo)
}

void Field_ElementInfo::InitAsDefaultInstance() {
  doc_ = const_cast< ::protocol::Doc*>(&::protocol::Doc::default_instance());
  enemy_ = const_cast< ::protocol::Enemy*>(&::protocol::Enemy::default_instance());
  flux_capatitor_ = const_cast< ::protocol::FluxCapatitor*>(&::protocol::FluxCapatitor::default_instance());
  chest_ = const_cast< ::protocol::Chest*>(&::protocol::Chest::default_instance());
  delorean_ = const_cast< ::protocol::DeLorean*>(&::protocol::DeLorean::default_instance());
}

Field_ElementInfo::Field_ElementInfo(const Field_ElementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Field.ElementInfo)
}

void Field_ElementInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  doc_ = NULL;
  enemy_ = NULL;
  flux_capatitor_ = NULL;
  chest_ = NULL;
  delorean_ = NULL;
  capability_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field_ElementInfo::~Field_ElementInfo() {
  // @@protoc_insertion_point(destructor:protocol.Field.ElementInfo)
  SharedDtor();
}

void Field_ElementInfo::SharedDtor() {
  if (this != default_instance_) {
    delete doc_;
    delete enemy_;
    delete flux_capatitor_;
    delete chest_;
    delete delorean_;
  }
}

void Field_ElementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field_ElementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_ElementInfo_descriptor_;
}

const Field_ElementInfo& Field_ElementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

Field_ElementInfo* Field_ElementInfo::default_instance_ = NULL;

Field_ElementInfo* Field_ElementInfo::New() const {
  return new Field_ElementInfo;
}

void Field_ElementInfo::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    type_ = 1;
    if (has_doc()) {
      if (doc_ != NULL) doc_->::protocol::Doc::Clear();
    }
    if (has_enemy()) {
      if (enemy_ != NULL) enemy_->::protocol::Enemy::Clear();
    }
    if (has_flux_capatitor()) {
      if (flux_capatitor_ != NULL) flux_capatitor_->::protocol::FluxCapatitor::Clear();
    }
    if (has_chest()) {
      if (chest_ != NULL) chest_->::protocol::Chest::Clear();
    }
    if (has_delorean()) {
      if (delorean_ != NULL) delorean_->::protocol::DeLorean::Clear();
    }
    capability_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Field_ElementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Field.ElementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .protocol.Field.ElementType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::Field_ElementType_IsValid(value)) {
            set_type(static_cast< ::protocol::Field_ElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_doc;
        break;
      }

      // optional .protocol.Doc doc = 2;
      case 2: {
        if (tag == 18) {
         parse_doc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_enemy;
        break;
      }

      // optional .protocol.Enemy enemy = 3;
      case 3: {
        if (tag == 26) {
         parse_enemy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_flux_capatitor;
        break;
      }

      // optional .protocol.FluxCapatitor flux_capatitor = 4;
      case 4: {
        if (tag == 34) {
         parse_flux_capatitor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flux_capatitor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chest;
        break;
      }

      // optional .protocol.Chest chest = 5;
      case 5: {
        if (tag == 42) {
         parse_chest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_delorean;
        break;
      }

      // optional .protocol.DeLorean delorean = 6;
      case 6: {
        if (tag == 50) {
         parse_delorean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delorean()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_capability;
        break;
      }

      // optional .protocol.Capability capability = 7;
      case 7: {
        if (tag == 56) {
         parse_capability:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::Capability_IsValid(value)) {
            set_capability(static_cast< ::protocol::Capability >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Field.ElementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Field.ElementInfo)
  return false;
#undef DO_
}

void Field_ElementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Field.ElementInfo)
  // required .protocol.Field.ElementType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .protocol.Doc doc = 2;
  if (has_doc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->doc(), output);
  }

  // optional .protocol.Enemy enemy = 3;
  if (has_enemy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enemy(), output);
  }

  // optional .protocol.FluxCapatitor flux_capatitor = 4;
  if (has_flux_capatitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->flux_capatitor(), output);
  }

  // optional .protocol.Chest chest = 5;
  if (has_chest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chest(), output);
  }

  // optional .protocol.DeLorean delorean = 6;
  if (has_delorean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->delorean(), output);
  }

  // optional .protocol.Capability capability = 7;
  if (has_capability()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->capability(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Field.ElementInfo)
}

::google::protobuf::uint8* Field_ElementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Field.ElementInfo)
  // required .protocol.Field.ElementType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .protocol.Doc doc = 2;
  if (has_doc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->doc(), target);
  }

  // optional .protocol.Enemy enemy = 3;
  if (has_enemy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enemy(), target);
  }

  // optional .protocol.FluxCapatitor flux_capatitor = 4;
  if (has_flux_capatitor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->flux_capatitor(), target);
  }

  // optional .protocol.Chest chest = 5;
  if (has_chest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->chest(), target);
  }

  // optional .protocol.DeLorean delorean = 6;
  if (has_delorean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->delorean(), target);
  }

  // optional .protocol.Capability capability = 7;
  if (has_capability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->capability(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Field.ElementInfo)
  return target;
}

int Field_ElementInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .protocol.Field.ElementType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .protocol.Doc doc = 2;
    if (has_doc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doc());
    }

    // optional .protocol.Enemy enemy = 3;
    if (has_enemy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemy());
    }

    // optional .protocol.FluxCapatitor flux_capatitor = 4;
    if (has_flux_capatitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flux_capatitor());
    }

    // optional .protocol.Chest chest = 5;
    if (has_chest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chest());
    }

    // optional .protocol.DeLorean delorean = 6;
    if (has_delorean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delorean());
    }

    // optional .protocol.Capability capability = 7;
    if (has_capability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->capability());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field_ElementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Field_ElementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Field_ElementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Field_ElementInfo::MergeFrom(const Field_ElementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_doc()) {
      mutable_doc()->::protocol::Doc::MergeFrom(from.doc());
    }
    if (from.has_enemy()) {
      mutable_enemy()->::protocol::Enemy::MergeFrom(from.enemy());
    }
    if (from.has_flux_capatitor()) {
      mutable_flux_capatitor()->::protocol::FluxCapatitor::MergeFrom(from.flux_capatitor());
    }
    if (from.has_chest()) {
      mutable_chest()->::protocol::Chest::MergeFrom(from.chest());
    }
    if (from.has_delorean()) {
      mutable_delorean()->::protocol::DeLorean::MergeFrom(from.delorean());
    }
    if (from.has_capability()) {
      set_capability(from.capability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Field_ElementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field_ElementInfo::CopyFrom(const Field_ElementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field_ElementInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_doc()) {
    if (!this->doc().IsInitialized()) return false;
  }
  if (has_enemy()) {
    if (!this->enemy().IsInitialized()) return false;
  }
  if (has_flux_capatitor()) {
    if (!this->flux_capatitor().IsInitialized()) return false;
  }
  if (has_chest()) {
    if (!this->chest().IsInitialized()) return false;
  }
  if (has_delorean()) {
    if (!this->delorean().IsInitialized()) return false;
  }
  return true;
}

void Field_ElementInfo::Swap(Field_ElementInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(doc_, other->doc_);
    std::swap(enemy_, other->enemy_);
    std::swap(flux_capatitor_, other->flux_capatitor_);
    std::swap(chest_, other->chest_);
    std::swap(delorean_, other->delorean_);
    std::swap(capability_, other->capability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Field_ElementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_ElementInfo_descriptor_;
  metadata.reflection = Field_ElementInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Field::kElementFieldNumber;
const int Field::kNextTickArrivesFieldNumber;
#endif  // !_MSC_VER

Field::Field()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Field)
}

void Field::InitAsDefaultInstance() {
  element_ = const_cast< ::protocol::Field_ElementInfo*>(&::protocol::Field_ElementInfo::default_instance());
}

Field::Field(const Field& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Field)
}

void Field::SharedCtor() {
  _cached_size_ = 0;
  element_ = NULL;
  next_tick_arrives_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:protocol.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  if (this != default_instance_) {
    delete element_;
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New() const {
  return new Field;
}

void Field::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_element()) {
      if (element_ != NULL) element_->::protocol::Field_ElementInfo::Clear();
    }
    next_tick_arrives_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.Field.ElementInfo element = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_element()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_next_tick_arrives;
        break;
      }

      // optional .protocol.Field.ElementType next_tick_arrives = 2;
      case 2: {
        if (tag == 16) {
         parse_next_tick_arrives:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protocol::Field_ElementType_IsValid(value)) {
            set_next_tick_arrives(static_cast< ::protocol::Field_ElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Field)
  // optional .protocol.Field.ElementInfo element = 1;
  if (has_element()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(), output);
  }

  // optional .protocol.Field.ElementType next_tick_arrives = 2;
  if (has_next_tick_arrives()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->next_tick_arrives(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Field)
}

::google::protobuf::uint8* Field::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Field)
  // optional .protocol.Field.ElementInfo element = 1;
  if (has_element()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->element(), target);
  }

  // optional .protocol.Field.ElementType next_tick_arrives = 2;
  if (has_next_tick_arrives()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->next_tick_arrives(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Field)
  return target;
}

int Field::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocol.Field.ElementInfo element = 1;
    if (has_element()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->element());
    }

    // optional .protocol.Field.ElementType next_tick_arrives = 2;
    if (has_next_tick_arrives()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->next_tick_arrives());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Field* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Field*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_element()) {
      mutable_element()->::protocol::Field_ElementInfo::MergeFrom(from.element());
    }
    if (from.has_next_tick_arrives()) {
      set_next_tick_arrives(from.next_tick_arrives());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {

  if (has_element()) {
    if (!this->element().IsInitialized()) return false;
  }
  return true;
}

void Field::Swap(Field* other) {
  if (other != this) {
    std::swap(element_, other->element_);
    std::swap(next_tick_arrives_, other->next_tick_arrives_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
