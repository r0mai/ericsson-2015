// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Response.proto

#ifndef PROTOBUF_Response_2eproto__INCLUDED
#define PROTOBUF_Response_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Elements.pb.h"
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Response_2eproto();
void protobuf_AssignDesc_Response_2eproto();
void protobuf_ShutdownFile_Response_2eproto();

class Response;

enum Response_Direction {
  Response_Direction_LEFT = 1,
  Response_Direction_UP = 2,
  Response_Direction_RIGHT = 3,
  Response_Direction_DOWN = 4
};
bool Response_Direction_IsValid(int value);
const Response_Direction Response_Direction_Direction_MIN = Response_Direction_LEFT;
const Response_Direction Response_Direction_Direction_MAX = Response_Direction_DOWN;
const int Response_Direction_Direction_ARRAYSIZE = Response_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Direction_descriptor();
inline const ::std::string& Response_Direction_Name(Response_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Direction_descriptor(), value);
}
inline bool Response_Direction_Parse(
    const ::std::string& name, Response_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Direction>(
    Response_Direction_descriptor(), name, value);
}
enum Response_Command {
  Response_Command_MOVE = 1,
  Response_Command_PUTFLUXCAPATITOR = 2,
  Response_Command_USECAPABILITY = 3
};
bool Response_Command_IsValid(int value);
const Response_Command Response_Command_Command_MIN = Response_Command_MOVE;
const Response_Command Response_Command_Command_MAX = Response_Command_USECAPABILITY;
const int Response_Command_Command_ARRAYSIZE = Response_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Command_descriptor();
inline const ::std::string& Response_Command_Name(Response_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Command_descriptor(), value);
}
inline bool Response_Command_Parse(
    const ::std::string& name, Response_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Command>(
    Response_Command_descriptor(), name, value);
}
// ===================================================================

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_Direction Direction;
  static const Direction LEFT = Response_Direction_LEFT;
  static const Direction UP = Response_Direction_UP;
  static const Direction RIGHT = Response_Direction_RIGHT;
  static const Direction DOWN = Response_Direction_DOWN;
  static inline bool Direction_IsValid(int value) {
    return Response_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    Response_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    Response_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    Response_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return Response_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return Response_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return Response_Direction_Parse(name, value);
  }

  typedef Response_Command Command;
  static const Command MOVE = Response_Command_MOVE;
  static const Command PUTFLUXCAPATITOR = Response_Command_PUTFLUXCAPATITOR;
  static const Command USECAPABILITY = Response_Command_USECAPABILITY;
  static inline bool Command_IsValid(int value) {
    return Response_Command_IsValid(value);
  }
  static const Command Command_MIN =
    Response_Command_Command_MIN;
  static const Command Command_MAX =
    Response_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    Response_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return Response_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return Response_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return Response_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .protocol.Response.Command command = 1;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline ::protocol::Response_Command command() const;
  inline void set_command(::protocol::Response_Command value);

  // optional .protocol.Response.Direction direction = 2;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 2;
  inline ::protocol::Response_Direction direction() const;
  inline void set_direction(::protocol::Response_Direction value);

  // optional uint32 flux_capatitor_id = 3;
  inline bool has_flux_capatitor_id() const;
  inline void clear_flux_capatitor_id();
  static const int kFluxCapatitorIdFieldNumber = 3;
  inline ::google::protobuf::uint32 flux_capatitor_id() const;
  inline void set_flux_capatitor_id(::google::protobuf::uint32 value);

  // optional uint32 flux_capatitor_time = 4;
  inline bool has_flux_capatitor_time() const;
  inline void clear_flux_capatitor_time();
  static const int kFluxCapatitorTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 flux_capatitor_time() const;
  inline void set_flux_capatitor_time(::google::protobuf::uint32 value);

  // optional .protocol.Capability capability = 5;
  inline bool has_capability() const;
  inline void clear_capability();
  static const int kCapabilityFieldNumber = 5;
  inline ::protocol::Capability capability() const;
  inline void set_capability(::protocol::Capability value);

  // @@protoc_insertion_point(class_scope:protocol.Response)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_flux_capatitor_id();
  inline void clear_has_flux_capatitor_id();
  inline void set_has_flux_capatitor_time();
  inline void clear_has_flux_capatitor_time();
  inline void set_has_capability();
  inline void clear_has_capability();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int command_;
  int direction_;
  ::google::protobuf::uint32 flux_capatitor_id_;
  ::google::protobuf::uint32 flux_capatitor_time_;
  int capability_;
  friend void  protobuf_AddDesc_Response_2eproto();
  friend void protobuf_AssignDesc_Response_2eproto();
  friend void protobuf_ShutdownFile_Response_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// Response

// optional .protocol.Response.Command command = 1;
inline bool Response::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_command() {
  command_ = 1;
  clear_has_command();
}
inline ::protocol::Response_Command Response::command() const {
  // @@protoc_insertion_point(field_get:protocol.Response.command)
  return static_cast< ::protocol::Response_Command >(command_);
}
inline void Response::set_command(::protocol::Response_Command value) {
  assert(::protocol::Response_Command_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:protocol.Response.command)
}

// optional .protocol.Response.Direction direction = 2;
inline bool Response::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
inline ::protocol::Response_Direction Response::direction() const {
  // @@protoc_insertion_point(field_get:protocol.Response.direction)
  return static_cast< ::protocol::Response_Direction >(direction_);
}
inline void Response::set_direction(::protocol::Response_Direction value) {
  assert(::protocol::Response_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:protocol.Response.direction)
}

// optional uint32 flux_capatitor_id = 3;
inline bool Response::has_flux_capatitor_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_flux_capatitor_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_flux_capatitor_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_flux_capatitor_id() {
  flux_capatitor_id_ = 0u;
  clear_has_flux_capatitor_id();
}
inline ::google::protobuf::uint32 Response::flux_capatitor_id() const {
  // @@protoc_insertion_point(field_get:protocol.Response.flux_capatitor_id)
  return flux_capatitor_id_;
}
inline void Response::set_flux_capatitor_id(::google::protobuf::uint32 value) {
  set_has_flux_capatitor_id();
  flux_capatitor_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Response.flux_capatitor_id)
}

// optional uint32 flux_capatitor_time = 4;
inline bool Response::has_flux_capatitor_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_flux_capatitor_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_flux_capatitor_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_flux_capatitor_time() {
  flux_capatitor_time_ = 0u;
  clear_has_flux_capatitor_time();
}
inline ::google::protobuf::uint32 Response::flux_capatitor_time() const {
  // @@protoc_insertion_point(field_get:protocol.Response.flux_capatitor_time)
  return flux_capatitor_time_;
}
inline void Response::set_flux_capatitor_time(::google::protobuf::uint32 value) {
  set_has_flux_capatitor_time();
  flux_capatitor_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Response.flux_capatitor_time)
}

// optional .protocol.Capability capability = 5;
inline bool Response::has_capability() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Response::set_has_capability() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Response::clear_has_capability() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Response::clear_capability() {
  capability_ = 1;
  clear_has_capability();
}
inline ::protocol::Capability Response::capability() const {
  // @@protoc_insertion_point(field_get:protocol.Response.capability)
  return static_cast< ::protocol::Capability >(capability_);
}
inline void Response::set_capability(::protocol::Capability value) {
  assert(::protocol::Capability_IsValid(value));
  set_has_capability();
  capability_ = value;
  // @@protoc_insertion_point(field_set:protocol.Response.capability)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::Response_Direction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Response_Direction>() {
  return ::protocol::Response_Direction_descriptor();
}
template <> struct is_proto_enum< ::protocol::Response_Command> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Response_Command>() {
  return ::protocol::Response_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Response_2eproto__INCLUDED
