// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Elements.proto

#ifndef PROTOBUF_Elements_2eproto__INCLUDED
#define PROTOBUF_Elements_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Elements_2eproto();
void protobuf_AssignDesc_Elements_2eproto();
void protobuf_ShutdownFile_Elements_2eproto();

class FluxCapatitor;
class FluxCapatitorInformations;
class Doc;
class Chest;
class DeLorean;

enum Capability {
  INCREASEMAXFLUXCAPATITOR = 1,
  INCREASEFLUXCAPATITORRADIUS = 2,
  DECREASEFLUXCAPATITORRADIUS = 3,
  INCREASEFLUXCAPATITORTIME = 4,
  DECREASEFLUXCAPATITORTIME = 5,
  DECREASEFLUXCAPATITORMAKING = 6,
  INCREASEENERGY = 7,
  KICKFLUXCAPATITOR = 8,
  THROWFLUXCAPATITOR = 9
};
bool Capability_IsValid(int value);
const Capability Capability_MIN = INCREASEMAXFLUXCAPATITOR;
const Capability Capability_MAX = THROWFLUXCAPATITOR;
const int Capability_ARRAYSIZE = Capability_MAX + 1;

const ::google::protobuf::EnumDescriptor* Capability_descriptor();
inline const ::std::string& Capability_Name(Capability value) {
  return ::google::protobuf::internal::NameOfEnum(
    Capability_descriptor(), value);
}
inline bool Capability_Parse(
    const ::std::string& name, Capability* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Capability>(
    Capability_descriptor(), name, value);
}
// ===================================================================

class FluxCapatitor : public ::google::protobuf::Message {
 public:
  FluxCapatitor();
  virtual ~FluxCapatitor();

  FluxCapatitor(const FluxCapatitor& from);

  inline FluxCapatitor& operator=(const FluxCapatitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FluxCapatitor& default_instance();

  void Swap(FluxCapatitor* other);

  // implements Message ----------------------------------------------

  FluxCapatitor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FluxCapatitor& from);
  void MergeFrom(const FluxCapatitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 time_to_activated = 2;
  inline bool has_time_to_activated() const;
  inline void clear_time_to_activated();
  static const int kTimeToActivatedFieldNumber = 2;
  inline ::google::protobuf::uint32 time_to_activated() const;
  inline void set_time_to_activated(::google::protobuf::uint32 value);

  // required uint32 radius = 3;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 3;
  inline ::google::protobuf::uint32 radius() const;
  inline void set_radius(::google::protobuf::uint32 value);

  // optional uint32 timetravel_length = 4;
  inline bool has_timetravel_length() const;
  inline void clear_timetravel_length();
  static const int kTimetravelLengthFieldNumber = 4;
  inline ::google::protobuf::uint32 timetravel_length() const;
  inline void set_timetravel_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.FluxCapatitor)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time_to_activated();
  inline void clear_has_time_to_activated();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_timetravel_length();
  inline void clear_has_timetravel_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_to_activated_;
  ::google::protobuf::uint32 radius_;
  ::google::protobuf::uint32 timetravel_length_;
  friend void  protobuf_AddDesc_Elements_2eproto();
  friend void protobuf_AssignDesc_Elements_2eproto();
  friend void protobuf_ShutdownFile_Elements_2eproto();

  void InitAsDefaultInstance();
  static FluxCapatitor* default_instance_;
};
// -------------------------------------------------------------------

class FluxCapatitorInformations : public ::google::protobuf::Message {
 public:
  FluxCapatitorInformations();
  virtual ~FluxCapatitorInformations();

  FluxCapatitorInformations(const FluxCapatitorInformations& from);

  inline FluxCapatitorInformations& operator=(const FluxCapatitorInformations& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FluxCapatitorInformations& default_instance();

  void Swap(FluxCapatitorInformations* other);

  // implements Message ----------------------------------------------

  FluxCapatitorInformations* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FluxCapatitorInformations& from);
  void MergeFrom(const FluxCapatitorInformations& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 next_done_time = 1;
  inline bool has_next_done_time() const;
  inline void clear_next_done_time();
  static const int kNextDoneTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 next_done_time() const;
  inline void set_next_done_time(::google::protobuf::uint32 value);

  // required uint32 making_time = 2;
  inline bool has_making_time() const;
  inline void clear_making_time();
  static const int kMakingTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 making_time() const;
  inline void set_making_time(::google::protobuf::uint32 value);

  // required uint32 max_flux_capatitors = 3;
  inline bool has_max_flux_capatitors() const;
  inline void clear_max_flux_capatitors();
  static const int kMaxFluxCapatitorsFieldNumber = 3;
  inline ::google::protobuf::uint32 max_flux_capatitors() const;
  inline void set_max_flux_capatitors(::google::protobuf::uint32 value);

  // required .protocol.FluxCapatitor next_flux_capatitor = 4;
  inline bool has_next_flux_capatitor() const;
  inline void clear_next_flux_capatitor();
  static const int kNextFluxCapatitorFieldNumber = 4;
  inline const ::protocol::FluxCapatitor& next_flux_capatitor() const;
  inline ::protocol::FluxCapatitor* mutable_next_flux_capatitor();
  inline ::protocol::FluxCapatitor* release_next_flux_capatitor();
  inline void set_allocated_next_flux_capatitor(::protocol::FluxCapatitor* next_flux_capatitor);

  // @@protoc_insertion_point(class_scope:protocol.FluxCapatitorInformations)
 private:
  inline void set_has_next_done_time();
  inline void clear_has_next_done_time();
  inline void set_has_making_time();
  inline void clear_has_making_time();
  inline void set_has_max_flux_capatitors();
  inline void clear_has_max_flux_capatitors();
  inline void set_has_next_flux_capatitor();
  inline void clear_has_next_flux_capatitor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 next_done_time_;
  ::google::protobuf::uint32 making_time_;
  ::protocol::FluxCapatitor* next_flux_capatitor_;
  ::google::protobuf::uint32 max_flux_capatitors_;
  friend void  protobuf_AddDesc_Elements_2eproto();
  friend void protobuf_AssignDesc_Elements_2eproto();
  friend void protobuf_ShutdownFile_Elements_2eproto();

  void InitAsDefaultInstance();
  static FluxCapatitorInformations* default_instance_;
};
// -------------------------------------------------------------------

class Doc : public ::google::protobuf::Message {
 public:
  Doc();
  virtual ~Doc();

  Doc(const Doc& from);

  inline Doc& operator=(const Doc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Doc& default_instance();

  void Swap(Doc* other);

  // implements Message ----------------------------------------------

  Doc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Doc& from);
  void MergeFrom(const Doc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 survive_timetravels = 2;
  inline bool has_survive_timetravels() const;
  inline void clear_survive_timetravels();
  static const int kSurviveTimetravelsFieldNumber = 2;
  inline ::google::protobuf::uint32 survive_timetravels() const;
  inline void set_survive_timetravels(::google::protobuf::uint32 value);

  // repeated .protocol.FluxCapatitor flux_capatitors = 3;
  inline int flux_capatitors_size() const;
  inline void clear_flux_capatitors();
  static const int kFluxCapatitorsFieldNumber = 3;
  inline const ::protocol::FluxCapatitor& flux_capatitors(int index) const;
  inline ::protocol::FluxCapatitor* mutable_flux_capatitors(int index);
  inline ::protocol::FluxCapatitor* add_flux_capatitors();
  inline const ::google::protobuf::RepeatedPtrField< ::protocol::FluxCapatitor >&
      flux_capatitors() const;
  inline ::google::protobuf::RepeatedPtrField< ::protocol::FluxCapatitor >*
      mutable_flux_capatitors();

  // required .protocol.FluxCapatitorInformations informations = 4;
  inline bool has_informations() const;
  inline void clear_informations();
  static const int kInformationsFieldNumber = 4;
  inline const ::protocol::FluxCapatitorInformations& informations() const;
  inline ::protocol::FluxCapatitorInformations* mutable_informations();
  inline ::protocol::FluxCapatitorInformations* release_informations();
  inline void set_allocated_informations(::protocol::FluxCapatitorInformations* informations);

  // repeated .protocol.Capability capabilities = 5;
  inline int capabilities_size() const;
  inline void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 5;
  inline ::protocol::Capability capabilities(int index) const;
  inline void set_capabilities(int index, ::protocol::Capability value);
  inline void add_capabilities(::protocol::Capability value);
  inline const ::google::protobuf::RepeatedField<int>& capabilities() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_capabilities();

  // @@protoc_insertion_point(class_scope:protocol.Doc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_survive_timetravels();
  inline void clear_has_survive_timetravels();
  inline void set_has_informations();
  inline void clear_has_informations();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 survive_timetravels_;
  ::google::protobuf::RepeatedPtrField< ::protocol::FluxCapatitor > flux_capatitors_;
  ::protocol::FluxCapatitorInformations* informations_;
  ::google::protobuf::RepeatedField<int> capabilities_;
  friend void  protobuf_AddDesc_Elements_2eproto();
  friend void protobuf_AssignDesc_Elements_2eproto();
  friend void protobuf_ShutdownFile_Elements_2eproto();

  void InitAsDefaultInstance();
  static Doc* default_instance_;
};
// -------------------------------------------------------------------

class Chest : public ::google::protobuf::Message {
 public:
  Chest();
  virtual ~Chest();

  Chest(const Chest& from);

  inline Chest& operator=(const Chest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chest& default_instance();

  void Swap(Chest* other);

  // implements Message ----------------------------------------------

  Chest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chest& from);
  void MergeFrom(const Chest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 survive_timetravels = 2;
  inline bool has_survive_timetravels() const;
  inline void clear_survive_timetravels();
  static const int kSurviveTimetravelsFieldNumber = 2;
  inline ::google::protobuf::uint32 survive_timetravels() const;
  inline void set_survive_timetravels(::google::protobuf::uint32 value);

  // optional .protocol.Capability capability = 3;
  inline bool has_capability() const;
  inline void clear_capability();
  static const int kCapabilityFieldNumber = 3;
  inline ::protocol::Capability capability() const;
  inline void set_capability(::protocol::Capability value);

  // @@protoc_insertion_point(class_scope:protocol.Chest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_survive_timetravels();
  inline void clear_has_survive_timetravels();
  inline void set_has_capability();
  inline void clear_has_capability();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 survive_timetravels_;
  int capability_;
  friend void  protobuf_AddDesc_Elements_2eproto();
  friend void protobuf_AssignDesc_Elements_2eproto();
  friend void protobuf_ShutdownFile_Elements_2eproto();

  void InitAsDefaultInstance();
  static Chest* default_instance_;
};
// -------------------------------------------------------------------

class DeLorean : public ::google::protobuf::Message {
 public:
  DeLorean();
  virtual ~DeLorean();

  DeLorean(const DeLorean& from);

  inline DeLorean& operator=(const DeLorean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeLorean& default_instance();

  void Swap(DeLorean* other);

  // implements Message ----------------------------------------------

  DeLorean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeLorean& from);
  void MergeFrom(const DeLorean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 survive_timetravels = 2;
  inline bool has_survive_timetravels() const;
  inline void clear_survive_timetravels();
  static const int kSurviveTimetravelsFieldNumber = 2;
  inline ::google::protobuf::uint32 survive_timetravels() const;
  inline void set_survive_timetravels(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.DeLorean)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_survive_timetravels();
  inline void clear_has_survive_timetravels();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 survive_timetravels_;
  friend void  protobuf_AddDesc_Elements_2eproto();
  friend void protobuf_AssignDesc_Elements_2eproto();
  friend void protobuf_ShutdownFile_Elements_2eproto();

  void InitAsDefaultInstance();
  static DeLorean* default_instance_;
};
// ===================================================================


// ===================================================================

// FluxCapatitor

// required uint32 id = 1;
inline bool FluxCapatitor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FluxCapatitor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FluxCapatitor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FluxCapatitor::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FluxCapatitor::id() const {
  // @@protoc_insertion_point(field_get:protocol.FluxCapatitor.id)
  return id_;
}
inline void FluxCapatitor::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.FluxCapatitor.id)
}

// required uint32 time_to_activated = 2;
inline bool FluxCapatitor::has_time_to_activated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FluxCapatitor::set_has_time_to_activated() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FluxCapatitor::clear_has_time_to_activated() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FluxCapatitor::clear_time_to_activated() {
  time_to_activated_ = 0u;
  clear_has_time_to_activated();
}
inline ::google::protobuf::uint32 FluxCapatitor::time_to_activated() const {
  // @@protoc_insertion_point(field_get:protocol.FluxCapatitor.time_to_activated)
  return time_to_activated_;
}
inline void FluxCapatitor::set_time_to_activated(::google::protobuf::uint32 value) {
  set_has_time_to_activated();
  time_to_activated_ = value;
  // @@protoc_insertion_point(field_set:protocol.FluxCapatitor.time_to_activated)
}

// required uint32 radius = 3;
inline bool FluxCapatitor::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FluxCapatitor::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FluxCapatitor::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FluxCapatitor::clear_radius() {
  radius_ = 0u;
  clear_has_radius();
}
inline ::google::protobuf::uint32 FluxCapatitor::radius() const {
  // @@protoc_insertion_point(field_get:protocol.FluxCapatitor.radius)
  return radius_;
}
inline void FluxCapatitor::set_radius(::google::protobuf::uint32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:protocol.FluxCapatitor.radius)
}

// optional uint32 timetravel_length = 4;
inline bool FluxCapatitor::has_timetravel_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FluxCapatitor::set_has_timetravel_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FluxCapatitor::clear_has_timetravel_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FluxCapatitor::clear_timetravel_length() {
  timetravel_length_ = 0u;
  clear_has_timetravel_length();
}
inline ::google::protobuf::uint32 FluxCapatitor::timetravel_length() const {
  // @@protoc_insertion_point(field_get:protocol.FluxCapatitor.timetravel_length)
  return timetravel_length_;
}
inline void FluxCapatitor::set_timetravel_length(::google::protobuf::uint32 value) {
  set_has_timetravel_length();
  timetravel_length_ = value;
  // @@protoc_insertion_point(field_set:protocol.FluxCapatitor.timetravel_length)
}

// -------------------------------------------------------------------

// FluxCapatitorInformations

// optional uint32 next_done_time = 1;
inline bool FluxCapatitorInformations::has_next_done_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FluxCapatitorInformations::set_has_next_done_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FluxCapatitorInformations::clear_has_next_done_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FluxCapatitorInformations::clear_next_done_time() {
  next_done_time_ = 0u;
  clear_has_next_done_time();
}
inline ::google::protobuf::uint32 FluxCapatitorInformations::next_done_time() const {
  // @@protoc_insertion_point(field_get:protocol.FluxCapatitorInformations.next_done_time)
  return next_done_time_;
}
inline void FluxCapatitorInformations::set_next_done_time(::google::protobuf::uint32 value) {
  set_has_next_done_time();
  next_done_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.FluxCapatitorInformations.next_done_time)
}

// required uint32 making_time = 2;
inline bool FluxCapatitorInformations::has_making_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FluxCapatitorInformations::set_has_making_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FluxCapatitorInformations::clear_has_making_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FluxCapatitorInformations::clear_making_time() {
  making_time_ = 0u;
  clear_has_making_time();
}
inline ::google::protobuf::uint32 FluxCapatitorInformations::making_time() const {
  // @@protoc_insertion_point(field_get:protocol.FluxCapatitorInformations.making_time)
  return making_time_;
}
inline void FluxCapatitorInformations::set_making_time(::google::protobuf::uint32 value) {
  set_has_making_time();
  making_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.FluxCapatitorInformations.making_time)
}

// required uint32 max_flux_capatitors = 3;
inline bool FluxCapatitorInformations::has_max_flux_capatitors() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FluxCapatitorInformations::set_has_max_flux_capatitors() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FluxCapatitorInformations::clear_has_max_flux_capatitors() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FluxCapatitorInformations::clear_max_flux_capatitors() {
  max_flux_capatitors_ = 0u;
  clear_has_max_flux_capatitors();
}
inline ::google::protobuf::uint32 FluxCapatitorInformations::max_flux_capatitors() const {
  // @@protoc_insertion_point(field_get:protocol.FluxCapatitorInformations.max_flux_capatitors)
  return max_flux_capatitors_;
}
inline void FluxCapatitorInformations::set_max_flux_capatitors(::google::protobuf::uint32 value) {
  set_has_max_flux_capatitors();
  max_flux_capatitors_ = value;
  // @@protoc_insertion_point(field_set:protocol.FluxCapatitorInformations.max_flux_capatitors)
}

// required .protocol.FluxCapatitor next_flux_capatitor = 4;
inline bool FluxCapatitorInformations::has_next_flux_capatitor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FluxCapatitorInformations::set_has_next_flux_capatitor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FluxCapatitorInformations::clear_has_next_flux_capatitor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FluxCapatitorInformations::clear_next_flux_capatitor() {
  if (next_flux_capatitor_ != NULL) next_flux_capatitor_->::protocol::FluxCapatitor::Clear();
  clear_has_next_flux_capatitor();
}
inline const ::protocol::FluxCapatitor& FluxCapatitorInformations::next_flux_capatitor() const {
  // @@protoc_insertion_point(field_get:protocol.FluxCapatitorInformations.next_flux_capatitor)
  return next_flux_capatitor_ != NULL ? *next_flux_capatitor_ : *default_instance_->next_flux_capatitor_;
}
inline ::protocol::FluxCapatitor* FluxCapatitorInformations::mutable_next_flux_capatitor() {
  set_has_next_flux_capatitor();
  if (next_flux_capatitor_ == NULL) next_flux_capatitor_ = new ::protocol::FluxCapatitor;
  // @@protoc_insertion_point(field_mutable:protocol.FluxCapatitorInformations.next_flux_capatitor)
  return next_flux_capatitor_;
}
inline ::protocol::FluxCapatitor* FluxCapatitorInformations::release_next_flux_capatitor() {
  clear_has_next_flux_capatitor();
  ::protocol::FluxCapatitor* temp = next_flux_capatitor_;
  next_flux_capatitor_ = NULL;
  return temp;
}
inline void FluxCapatitorInformations::set_allocated_next_flux_capatitor(::protocol::FluxCapatitor* next_flux_capatitor) {
  delete next_flux_capatitor_;
  next_flux_capatitor_ = next_flux_capatitor;
  if (next_flux_capatitor) {
    set_has_next_flux_capatitor();
  } else {
    clear_has_next_flux_capatitor();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.FluxCapatitorInformations.next_flux_capatitor)
}

// -------------------------------------------------------------------

// Doc

// required uint32 id = 1;
inline bool Doc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Doc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Doc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Doc::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Doc::id() const {
  // @@protoc_insertion_point(field_get:protocol.Doc.id)
  return id_;
}
inline void Doc::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Doc.id)
}

// required uint32 survive_timetravels = 2;
inline bool Doc::has_survive_timetravels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Doc::set_has_survive_timetravels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Doc::clear_has_survive_timetravels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Doc::clear_survive_timetravels() {
  survive_timetravels_ = 0u;
  clear_has_survive_timetravels();
}
inline ::google::protobuf::uint32 Doc::survive_timetravels() const {
  // @@protoc_insertion_point(field_get:protocol.Doc.survive_timetravels)
  return survive_timetravels_;
}
inline void Doc::set_survive_timetravels(::google::protobuf::uint32 value) {
  set_has_survive_timetravels();
  survive_timetravels_ = value;
  // @@protoc_insertion_point(field_set:protocol.Doc.survive_timetravels)
}

// repeated .protocol.FluxCapatitor flux_capatitors = 3;
inline int Doc::flux_capatitors_size() const {
  return flux_capatitors_.size();
}
inline void Doc::clear_flux_capatitors() {
  flux_capatitors_.Clear();
}
inline const ::protocol::FluxCapatitor& Doc::flux_capatitors(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Doc.flux_capatitors)
  return flux_capatitors_.Get(index);
}
inline ::protocol::FluxCapatitor* Doc::mutable_flux_capatitors(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Doc.flux_capatitors)
  return flux_capatitors_.Mutable(index);
}
inline ::protocol::FluxCapatitor* Doc::add_flux_capatitors() {
  // @@protoc_insertion_point(field_add:protocol.Doc.flux_capatitors)
  return flux_capatitors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::FluxCapatitor >&
Doc::flux_capatitors() const {
  // @@protoc_insertion_point(field_list:protocol.Doc.flux_capatitors)
  return flux_capatitors_;
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::FluxCapatitor >*
Doc::mutable_flux_capatitors() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Doc.flux_capatitors)
  return &flux_capatitors_;
}

// required .protocol.FluxCapatitorInformations informations = 4;
inline bool Doc::has_informations() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Doc::set_has_informations() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Doc::clear_has_informations() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Doc::clear_informations() {
  if (informations_ != NULL) informations_->::protocol::FluxCapatitorInformations::Clear();
  clear_has_informations();
}
inline const ::protocol::FluxCapatitorInformations& Doc::informations() const {
  // @@protoc_insertion_point(field_get:protocol.Doc.informations)
  return informations_ != NULL ? *informations_ : *default_instance_->informations_;
}
inline ::protocol::FluxCapatitorInformations* Doc::mutable_informations() {
  set_has_informations();
  if (informations_ == NULL) informations_ = new ::protocol::FluxCapatitorInformations;
  // @@protoc_insertion_point(field_mutable:protocol.Doc.informations)
  return informations_;
}
inline ::protocol::FluxCapatitorInformations* Doc::release_informations() {
  clear_has_informations();
  ::protocol::FluxCapatitorInformations* temp = informations_;
  informations_ = NULL;
  return temp;
}
inline void Doc::set_allocated_informations(::protocol::FluxCapatitorInformations* informations) {
  delete informations_;
  informations_ = informations;
  if (informations) {
    set_has_informations();
  } else {
    clear_has_informations();
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Doc.informations)
}

// repeated .protocol.Capability capabilities = 5;
inline int Doc::capabilities_size() const {
  return capabilities_.size();
}
inline void Doc::clear_capabilities() {
  capabilities_.Clear();
}
inline ::protocol::Capability Doc::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Doc.capabilities)
  return static_cast< ::protocol::Capability >(capabilities_.Get(index));
}
inline void Doc::set_capabilities(int index, ::protocol::Capability value) {
  assert(::protocol::Capability_IsValid(value));
  capabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.Doc.capabilities)
}
inline void Doc::add_capabilities(::protocol::Capability value) {
  assert(::protocol::Capability_IsValid(value));
  capabilities_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.Doc.capabilities)
}
inline const ::google::protobuf::RepeatedField<int>&
Doc::capabilities() const {
  // @@protoc_insertion_point(field_list:protocol.Doc.capabilities)
  return capabilities_;
}
inline ::google::protobuf::RepeatedField<int>*
Doc::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Doc.capabilities)
  return &capabilities_;
}

// -------------------------------------------------------------------

// Chest

// required uint32 id = 1;
inline bool Chest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chest::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Chest::id() const {
  // @@protoc_insertion_point(field_get:protocol.Chest.id)
  return id_;
}
inline void Chest::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Chest.id)
}

// required uint32 survive_timetravels = 2;
inline bool Chest::has_survive_timetravels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chest::set_has_survive_timetravels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chest::clear_has_survive_timetravels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chest::clear_survive_timetravels() {
  survive_timetravels_ = 0u;
  clear_has_survive_timetravels();
}
inline ::google::protobuf::uint32 Chest::survive_timetravels() const {
  // @@protoc_insertion_point(field_get:protocol.Chest.survive_timetravels)
  return survive_timetravels_;
}
inline void Chest::set_survive_timetravels(::google::protobuf::uint32 value) {
  set_has_survive_timetravels();
  survive_timetravels_ = value;
  // @@protoc_insertion_point(field_set:protocol.Chest.survive_timetravels)
}

// optional .protocol.Capability capability = 3;
inline bool Chest::has_capability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chest::set_has_capability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chest::clear_has_capability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chest::clear_capability() {
  capability_ = 1;
  clear_has_capability();
}
inline ::protocol::Capability Chest::capability() const {
  // @@protoc_insertion_point(field_get:protocol.Chest.capability)
  return static_cast< ::protocol::Capability >(capability_);
}
inline void Chest::set_capability(::protocol::Capability value) {
  assert(::protocol::Capability_IsValid(value));
  set_has_capability();
  capability_ = value;
  // @@protoc_insertion_point(field_set:protocol.Chest.capability)
}

// -------------------------------------------------------------------

// DeLorean

// required uint32 id = 1;
inline bool DeLorean::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeLorean::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeLorean::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeLorean::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DeLorean::id() const {
  // @@protoc_insertion_point(field_get:protocol.DeLorean.id)
  return id_;
}
inline void DeLorean::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.DeLorean.id)
}

// required uint32 survive_timetravels = 2;
inline bool DeLorean::has_survive_timetravels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeLorean::set_has_survive_timetravels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeLorean::clear_has_survive_timetravels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeLorean::clear_survive_timetravels() {
  survive_timetravels_ = 0u;
  clear_has_survive_timetravels();
}
inline ::google::protobuf::uint32 DeLorean::survive_timetravels() const {
  // @@protoc_insertion_point(field_get:protocol.DeLorean.survive_timetravels)
  return survive_timetravels_;
}
inline void DeLorean::set_survive_timetravels(::google::protobuf::uint32 value) {
  set_has_survive_timetravels();
  survive_timetravels_ = value;
  // @@protoc_insertion_point(field_set:protocol.DeLorean.survive_timetravels)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::Capability> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Capability>() {
  return ::protocol::Capability_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Elements_2eproto__INCLUDED
